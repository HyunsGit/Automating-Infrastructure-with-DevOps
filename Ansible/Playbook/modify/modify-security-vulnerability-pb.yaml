---
- name: apply security requirements
  hosts: all

- name: disableRootLogin(U01)
  hosts: all
  become: true
  tasks:
    - name: change permitrootlogin option(U01)
      lineinfile:
            dest: /etc/ssh/sshd_config
            regexp: '^PermitRootLogin'
            line: "PermitRootLogin no"
            state: present
            backup: true
      notify:
        - restart ssh
  handlers:
    - name: restart ssh
      service:
        name: sshd
        state: restarted


- name: passwordComplexity(U02)
  hosts: all
  become: true
  tasks:
    - name: install pwquality package(U02-1)
      package:
            name: libpam-pwquality
            state: present
    - name: change pwquality config(U02-2)
      replace:
            dest: /etc/security/pwquality.conf
            regexp: "{{ item.From }}"
            replace: "{{ item.To }}"
            backup: true
      with_items:
        - { From: '^dcredit.*', To: 'dcredit = -1' }
        - { From: '^ucredit.*', To: 'ucredit = -1' }
        - { From: '^lcredit.*', To: 'lcredit = -1' }
        - { From: '^ocredit.*', To: 'ocredit = -1' }
        - { From: '^minlen.*', To: 'minlen = 8' }
        - { From: '^difok.*', To: 'difok = N' }
    - name: remove invalid password policy(U02-3)
      file:
        path: "/etc.pam.d/common-password"
        state: absent
    - name: reapply common password policy(U02-4)
      copy:
        dest: "/etc/pam.d/common-password"
        backup: true
        content: |
          password        requisite                       pam_pwquality.so retry=3 minlen=8 lcredit=-1 ucredit=-1 dcredit=-1 ocredit=-1
          password        [success=1 default=ignore]      pam_unix.so obscure use_authtok try_first_pass yescrypt
          password        requisite                       pam_deny.so
          password        required                        pam_permit.so


- name: accountLockThreshold(U03)
  hosts: all
  become: true
  tasks:
    - name: reapply common authorization policy(U03-1)
      copy:
        dest: "/etc/pam.d/common-auth"
        backup: true
        content: |
          auth    required                        pam_faillock.so preauth audit silent deny=3 fail_interval=60 unlock_time=120
          auth    [success=1 default=ignore]      pam_unix.so nullok
          auth    [default=die]                   pam_faillock.so authfail audit deny=3 fail_interval=60 unlock_time=120
          auth    sufficient                      pam_faillock.so authsucc audit deny=3 fail_interval=60 unlock_time=120
          auth    requisite                       pam_deny.so
          auth    required                        pam_permit.so
          auth    optional                        pam_cap.so
    - name: check for /etc/pam.d/common-account(U03-2)
      stat:
        path: /etc/pam.d/common-account
      register: common_account_existence
    - name: inspect common account policy(U03-3)
      shell: cat /etc/pam.d/common-account
      register: common_account_config
      changed_when: not common_account_existence.stat.exists
    - name: append config to common account policy(U03-4)
      lineinfile:
        path: "/etc/pam.d/common-account"
        backup: true
        insertafter: "^pam-auth-update config"
        line: "account    required pam_faillock.so"
      when: "'faillock.so' not in common_account_config"


- name: /etc/shadow owner&permission(U08)
  hosts: all
  become: true
  tasks:
    - name: change permission & ownership of /etc/shadow config(U08-1)
      file:
        path: /etc/shadow
        owner: root
        mode: 0400


- name: /etc/hosts owner&permission(U09)
  hosts: all
  become: true
  tasks:
    - name: change permission & ownership of /etc/hosts config(U09-1)
      file:
        path: /etc/hosts
        owner: root
        mode: 0600


- name: /etc/rsyslog.conf owner&permission(U11)
  hosts: all
  become: true
  tasks:
    - name: change permission & ownership of /etc/profile config(U11)
      file:
        path: /etc/rsyslog.conf
        owner: root
        mode: 0640


- name: /etc/profile owner&permission(U14)
  hosts: all
  become: true
  tasks:
    - name: change permission & ownership of /etc/profile config(U14)
      file:
        path: /etc/profile
        owner: root
        mode: 0600


- name: examine world writable files(U15)
  vars:
    arg: \( ls -l {}\;)
  hosts: all
  become: true
  tasks:
    - name: search for world writable files
      shell: find / -f -perm -o=w {{ arg }}
      register: wwf
    - set_fact:
        cron_config: "{{ wwf.files | map(attribute='path') | list}}"
    - debug:
        msg: "{{ cron_config }}"


- name: cron relevant owner&permission(U22)
  hosts: all
  become: true
  tasks:
    - name: change permission & ownership of /usr/bin/crontab config(U22-1)
      file:
        path: /usr/bin/crontab
        owner: root
        mode: 0750
    - name: change permission & ownership of /etc/crontab config(U22-2)
      file:
        path: /etc/crontab
        owner: root
        mode: 0640    
    - name: find /etc/cron relevant config(U22-3)
      find:
        paths: /etc
        patterns: 
          - "cron*"
          - "crontab"
        file_type: directory
      register: cron
    - set_fact:
        cron_config: "{{ cron.files | map(attribute='path') | list}}"
    - name: change permission & ownership of /etc/cron relevant config(U22-4)
      file:
        path: "{{ item }}"
        state: directory
        recurse: true
        owner: root
        mode: 0640
      with_items: "{{ cron_config }}"


- name: minimum password length(U46)
  hosts: all
  become: true
  tasks:
    - name: minimum password length(U46-1)
      lineinfile:
            dest: /etc/login.defs
            regexp: '^PASS_MIN_LEN'
            line: "PASS_MIN_LEN 8"
            state: present
            backup: true


- name: maximum password lifetime(U47)
  hosts: all
  become: true
  tasks:
    - name: maximum password lifetime(U47-1)
      lineinfile:
            dest: /etc/login.defs
            regexp: '^PASS_MAX_DAYS.*'
            line: "PASS_MAX_DAYS 90"
            state: present
            backup: true

      
- name: minimum password lifetime(U48)
  hosts: all
  become: true
  tasks:
    - name: minimum password lifetime(U48-1)
      lineinfile:
            dest: /etc/login.defs
            regexp: '^PASS_MIN_DAYS.*'
            line: "PASS_MIN_DAYS 1"
            state: present
            backup: true


- name: session timeout policy(U54)
  hosts: all
  become: true
  tasks:
    - name: check for /etc/profile(U54-1)
      stat:
        path: /etc/profile
      register: profile
      changed_when: not profile.stat.exists
    - name: append session timeout policy(U54-2)
      blockinfile: 
            path: /etc/profile
            marker: "#{mark} block1"
            block: |
                TMOUT=300
                export TMOUT
      when: "'TMOUT' not in profile"


- name: enable message of the day(U68)
  hosts: all
  become: true
  tasks:
    - name: check if motd config exists(U68-1)
      stat:
        path: "/etc/update-motd.d/01-custom"
      register: motd_existence
    - name: create motd(U68-2)
      file:
        path: "/etc/update-motd.d/01-custom"
        state: touch
      changed_when: not motd_existence.stat.exists
    - name: append motd content(U68-3)
      blockinfile: 
            path: /etc/update-motd.d/01-custom
            block: |
                #!/bin/bash
                publicIP=`wget http://ipecho.net/plain -O - -q ; echo 2> /dev/null`
                TotalPMem=`free -m | grep -v total | grep -v Swap | awk '{print $2}'`
                UsingPMem=`free -m | grep -v total | grep -v Swap | awk '{print $3}'`
                UsingPMemPer=`expr \( ${UsingPMem} \* 100 \/ ${TotalPMem} \)`
                TotalVMem=`free -m | grep -v total | grep -v Mem | awk '{print $2}'`
                UsingVMem=`free -m | grep -v total | grep -v Mem | awk '{print $3}'`
                UsingVMemPer=`expr \( ${UsingVMem} \* 100 \/ ${TotalVMem} \)`
                TotalHDD=`df -h | grep -w vda1 | awk '{print $2}'`
                UsingHDD=`df -h | grep -w vda1 | awk '{print $3}'`
                UsingHDDPer=`df -h | grep -w vda1 | awk '{print $5}'`

                #color
                W="\033[47;30m"
                YU="\033[43;31m"
                Y="\033[1;33m"
                R="\033[43;31m"
                G="\033[0;32m"
                E="\033[0m"
                B="\033[0;34m"
                M="\033[0;35m"
                C="\033[0;36m"

                echo "=================================================================================="
                echo "||"                                                                               
                printf "||   ${Y}DKTECHIN ${M}카엔IDC팀 TAM의 ${G}관리 대상 서버${E}입니다.\n||\n"
                printf "||    = ${C}작업 환경${E} =\n"
                echo "||        배포판 정보    : `cat /etc/issue | awk '{print $1,$2,$3}'`"                           
                echo "||        커널 정보    : `uname -r`"                                            
                echo "||        메모리 사용량    : ${UsingPMem}M / ${TotalPMem}M (${UsingPMemPer}%)"
                echo "||        SWAP 사용량    : ${UsingVMem}M / ${TotalVMem}M (${UsingVMemPer}%)"
                echo "||        HDD 사용량    : ${UsingHDD} / ${TotalHDD} (${UsingHDDPer})"
                echo "||"
                printf "||    = ${C}기타 정보${E} =\n"
                echo "||        마지막 재부팅     : `uptime -s`"
                echo "||        공인 IP     : ${publicIP}"
                echo "||"
                printf "||    * ${YU}필요한 패키지가 설치되지 않은 경우 TAM에게 알려주세요.${E}\n"
                echo "||"
                printf "||                        ${B}last modified : 240116-hans${E}\n"
                echo "||"
                echo "=================================================================================="
      when: "'publicIP' not in motd_existence"
    - name: find motd relevant config(U68-4)
      find:
        paths: /etc/update-motd.d
        patterns: 
          - "*"
        file_type: file
        excludes: '50-landscape-sysinfo,01-custom'
      register: motd
    - set_fact:
        cron_config: "{{ motd.files | map(attribute='path') | list}}"
    # - debug:
    #     msg: "{{ cron_config }}"
    - name: change permission & ownership of motd relevant config(U68-5)
      file:
        path: "{{ item }}"
        # state: directory
        # recurse: true
        owner: root
        mode: u=rw,g=r,o=r
      with_items: "{{ cron_config }}"
    - name: change permission of custom motd config(U68-6)
      file:
        path: /etc/update-motd.d/01-custom
        owner: root
        mode: 0744
